From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kashike <kashike@vq.lc>
Date: Tue, 20 Sep 2016 00:58:01 +0000
Subject: [PATCH] Configurable flying kick messages


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 8d60415c8f42d90ea50b5c05db736cf66f6e9d42..5c7127def00bd9174a144a434d385fbaac6bb0c0 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -15,6 +15,9 @@ import java.util.logging.Level;
 import java.util.regex.Pattern;
 
 import com.google.common.collect.Lists;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.command.Command;
@@ -273,4 +276,21 @@ public class PaperConfig {
         }
         packetInSpamThreshold = getInt("settings.incoming-packet-spam-threshold", 300);
     }
+
+    private static final String defaultFlyingKickPlayerMessage = "Flying is not enabled on this server";
+    private static final String defaultFlyingKickVehicleMessage = "Flying is not enabled on this server";
+    public static Component flyingKickPlayerMessage = Component.text(defaultFlyingKickPlayerMessage);
+    public static Component flyingKickVehicleMessage = Component.text(defaultFlyingKickVehicleMessage);
+    private static void flyingKickMessages() {
+        MiniMessage miniMessage = MiniMessage.miniMessage();
+        if (version < 28) {
+            LegacyComponentSerializer legacy = LegacyComponentSerializer.legacyAmpersand();
+            flyingKickPlayerMessage = legacy.deserialize(getString("messages.kick.flying-player", defaultFlyingKickPlayerMessage));
+            flyingKickVehicleMessage = legacy.deserialize(getString("messages.kick.flying-vehicle", defaultFlyingKickVehicleMessage));
+            set("messages.kick.flying-player", miniMessage.serialize(flyingKickPlayerMessage));
+            set("messages.kick.flying-vehicle", miniMessage.serialize(flyingKickVehicleMessage));
+        }
+        flyingKickPlayerMessage = miniMessage.deserialize(getString("messages.kick.flying-player", defaultFlyingKickPlayerMessage));
+        flyingKickVehicleMessage = miniMessage.deserialize(getString("messages.kick.flying-vehicle", defaultFlyingKickVehicleMessage));
+    }
 }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 8f0a93e16860bbd062718248b958b72d7c6db0ee..192b0fae5ef200efefeb9727a68c17e3ca962027 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -300,7 +300,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         if (this.clientIsFloating && !this.player.isSleeping() && !this.player.isPassenger()) {
             if (++this.aboveGroundTickCount > 80) {
                 ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked for floating too long!", this.player.getName().getString());
-                this.disconnect(new TranslatableComponent("multiplayer.disconnect.flying"));
+                this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickPlayerMessage); // Paper - use configurable kick message
                 return;
             }
         } else {
@@ -319,7 +319,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             if (this.clientVehicleIsFloating && this.player.getRootVehicle().getControllingPassenger() == this.player) {
                 if (++this.aboveGroundVehicleTickCount > 80) {
                     ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName().getString());
-                    this.disconnect(new TranslatableComponent("multiplayer.disconnect.flying"));
+                    this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickVehicleMessage); // Paper - use configurable kick message
                     return;
                 }
             } else {
